import type { InferCustomEventPayload } from './customEvent'

<<<<<<< HEAD
export type ModuleNamespace = Record<string, any> & {
  [Symbol.toStringTag]: 'Module'
}

=======
>>>>>>> a4330c92abd799b6367591b02a3005be685f97f3
export interface ViteHotContext {
  readonly data: any

  accept(): void
<<<<<<< HEAD
  accept(cb: (mod: ModuleNamespace | undefined) => void): void
  accept(dep: string, cb: (mod: ModuleNamespace | undefined) => void): void
  accept(
    deps: readonly string[],
    cb: (mods: Array<ModuleNamespace | undefined>) => void,
  ): void

  acceptExports(
    exportNames: string | readonly string[],
    cb?: (mod: ModuleNamespace | undefined) => void,
  ): void

  dispose(cb: (data: any) => void): void
  prune(cb: (data: any) => void): void
  invalidate(message?: string): void

  on<T extends string>(
    event: T,
    cb: (payload: InferCustomEventPayload<T>) => void,
  ): void
  off<T extends string>(
    event: T,
    cb: (payload: InferCustomEventPayload<T>) => void,
=======
  accept(cb: (mod: any) => void): void
  accept(dep: string, cb: (mod: any) => void): void
  accept(deps: readonly string[], cb: (mods: any[]) => void): void

  /**
   * @deprecated
   */
  acceptDeps(): never

  dispose(cb: (data: any) => void): void
  decline(): void
  invalidate(): void

  on<T extends string>(
    event: T,
    cb: (payload: InferCustomEventPayload<T>) => void
>>>>>>> a4330c92abd799b6367591b02a3005be685f97f3
  ): void
  send<T extends string>(event: T, data?: InferCustomEventPayload<T>): void
}
